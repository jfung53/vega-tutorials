by = "GEOID")
glimpse(local_seg_export)
head(local_seg_export)
View(local_seg_export)
# remove NA's
local_seg_export <- na.omit(local_seg_export)
write.csv(local_seg_export, "dissimilarity_scores.csv", row.names=FALSE)
View(local_seg)
# add borough column
local_seg_export <- local_seg %>%
left_join(nyc_data %>% select(GEOID, borough),
by = "GEOID")
View(local_seg_export)
View(mhhincome)
# adding borough names to income df
mhhincome2 <- mhhincome2 %>%
mutate(borough = case_when(
str_detect(NAME, "Bronx") ~ "Bronx",
str_detect(NAME, "Kings") ~ "Brooklyn",
str_detect(NAME, "New York County") ~ "Manhattan",
str_detect(NAME, "Queens") ~ "Queens",
str_detect(NAME, "Richmond") ~ "Staten Island",
TRUE ~ NA_character_
))
View(mhhincome2)
# add borough column
local_seg_export <- local_seg %>%
left_join(mhhincome2 %>% select(GEOID, borough),
by = "GEOID")
View(mhhincome2)
View(local_seg_export)
View(nyc_data)
View(mhhincome2)
head(local_seg_export)
# remove NA's
local_seg_export <- na.omit(local_seg_export)
write.csv(local_seg_export, "dissimilarity_scores.csv", row.names=FALSE)
# add income column
local_seg_export <- local_seg_export %>%
left_join(mhhincome2 %>% select(GEOID, B19013_001E),
by = "GEOID")
local_seg_export <- local_seg_export %>%
rename(
income = B19013_001E
)
write.csv(local_seg_export, "dissimilarity_scores.csv", row.names=FALSE)
write.csv(local_seg_export, "dissimilarity_scores.csv", row.names=FALSE)
View(local_seg_export)
write.csv(local_seg_export, "data/dissimilarity_scores.csv", row.names=FALSE)
library(jsonlite)
View(nyc_data)
View(nyc_data)
source("~/Documents/Pratt/616-interactive-viz/vega-tutorials/data/dissimilarity-index.R")
# export to json for vega
write_json(nyc_localseg_tracts, "nyc_censustracts.json", pretty=TRUE)
View(nyc_localseg_tracts)
setwd("/Users/jocelyn/Documents/Pratt/616-interactive-viz/vega-tutorials/data")
library(tidyverse)
library(tidycensus)
library(segregation)
library(dplyr)
library(stringr)
library(jsonlite)
census_api_key("e765fd46add9ecff24174462fb36873559ba91e7")
# set up race variables
race <- c(
asian = "B03002_006",
black = "B03002_004",
hispanic = "B03002_012",
white = "B03002_003")
# nyc's counties, aka the five boroughs
nyc_counties <- c("Kings", "Queens", "New York", "Bronx", "Richmond")
# get nyc race data per census tract
nyc_race_tracts <- get_acs(geography = "tract",
state = "New York",
# geometry = TRUE,
county = nyc_counties,
variables = race,
year = 2022)
# get nyc median household income per census tract
nyc_income_tracts_acs <- get_acs(geography = "tract",
state = "New York",
county = nyc_counties,
variables = "B19013_001E",
year = 2022,
output = "wide")
View(nyc_income_tracts_acs)
# remove rows with NA income
nyc_income_tracts <- na.omit(nyc_income_tracts_acs)
# make new column for borough names using dplyr and stringr
nyc_race_tracts <- nyc_race_tracts %>%
mutate(borough = case_when(
str_detect(NAME, "Bronx") ~ "Bronx",
str_detect(NAME, "Kings") ~ "Brooklyn",
str_detect(NAME, "New York County") ~ "Manhattan",
str_detect(NAME, "Queens") ~ "Queens",
str_detect(NAME, "Richmond") ~ "Staten Island",
TRUE ~ NA_character_
))
View(nyc_race_tracts)
# adding borough names to income df
nyc_income_tracts <- nyc_income_tracts %>%
mutate(borough = case_when(
str_detect(NAME, "Bronx") ~ "Bronx",
str_detect(NAME, "Kings") ~ "Brooklyn",
str_detect(NAME, "New York County") ~ "Manhattan",
str_detect(NAME, "Queens") ~ "Queens",
str_detect(NAME, "Richmond") ~ "Staten Island",
TRUE ~ NA_character_
))
# testing dissimilarity index between two groups
nyc_race_tracts %>%
filter(variable %in% c("white", "black")) %>%
dissimilarity(
group = "variable",
unit = "GEOID",
weight = "estimate"
)
# testing dissimilarity by borough
nyc_race_tracts %>%
filter(variable %in% c("white", "black")) %>%
group_by(borough) %>%
group_modify(~
dissimilarity(.x,
group = "variable",
unit = "GEOID",
weight = "estimate")) %>%
arrange(desc(est))
# calculate multi-group segregation indices per census tract
# ls = unit-level segregation scores
# ls = 1  average segregation
# ls > 1  more segregated than average
# ls < 1  less segregated than average
# ls = 0  no segregation
nyc_localseg_tracts <-
mutual_local(data = nyc_race_tracts,
group = "variable",
unit = "GEOID",
weight = "estimate",
wide = TRUE)
View(nyc_localseg_tracts)
# add borough column
nyc_localseg_tracts <- nyc_localseg_tracts %>%
left_join(nyc_income_tracts %>% select(GEOID, borough),
by = "GEOID")
head(nyc_localseg_tracts)
# add borough column
nyc_localseg_tracts <- nyc_localseg_tracts %>%
left_join(nyc_race_tracts %>% select(GEOID, borough),
by = "GEOID")
# calculate multi-group segregation indices per census tract
# ls = unit-level segregation scores
# ls = 1  average segregation
# ls > 1  more segregated than average
# ls < 1  less segregated than average
# ls = 0  no segregation
nyc_localseg_tracts <-
mutual_local(data = nyc_race_tracts,
group = "variable",
unit = "GEOID",
weight = "estimate",
wide = TRUE)
# add borough column
nyc_localseg_tracts <- nyc_localseg_tracts %>%
left_join(nyc_race_tracts %>% select(GEOID, borough),
by = "GEOID")
head(nyc_localseg_tracts)
# add income column
nyc_localseg_tracts <- nyc_localseg_tracts %>%
left_join(nyc_income_tracts %>% select(GEOID, B19013_001E),
by = "GEOID")
# rename census table name to income
nyc_localseg_tracts <- nyc_localseg_tracts %>%
rename(
income = B19013_001E
)
# calculate multi-group segregation indices per census tract
# ls = unit-level segregation scores
# ls = 1  average segregation
# ls > 1  more segregated than average
# ls < 1  less segregated than average
# ls = 0  no segregation
nyc_localseg_tracts <-
mutual_local(data = nyc_race_tracts,
group = "variable",
unit = "GEOID",
weight = "estimate",
wide = TRUE)
# get nyc median household income per census tract
nyc_income_tracts_acs <- get_acs(geography = "tract",
state = "New York",
county = nyc_counties,
variables = "B19013_001E",
year = 2022,
output = "wide")
# adding borough names to income df
nyc_income_tracts <- nyc_income_tracts %>%
mutate(borough = case_when(
str_detect(NAME, "Bronx") ~ "Bronx",
str_detect(NAME, "Kings") ~ "Brooklyn",
str_detect(NAME, "New York County") ~ "Manhattan",
str_detect(NAME, "Queens") ~ "Queens",
str_detect(NAME, "Richmond") ~ "Staten Island",
TRUE ~ NA_character_
))
setwd("/Users/jocelyn/Documents/Pratt/616-interactive-viz/vega-tutorials/data")
library(tidyverse)
library(tidycensus)
library(segregation)
library(dplyr)
library(stringr)
library(jsonlite)
census_api_key("e765fd46add9ecff24174462fb36873559ba91e7")
# set up race variables
race <- c(
asian = "B03002_006",
black = "B03002_004",
hispanic = "B03002_012",
white = "B03002_003")
# nyc's counties, aka the five boroughs
nyc_counties <- c("Kings", "Queens", "New York", "Bronx", "Richmond")
# get nyc race data per census tract
nyc_race_tracts <- get_acs(geography = "tract",
state = "New York",
# geometry = TRUE,
county = nyc_counties,
variables = race,
year = 2022)
# get nyc median household income per census tract
nyc_income_tracts <- get_acs(geography = "tract",
state = "New York",
county = nyc_counties,
variables = "B19013_001E",
year = 2022,
output = "wide")
# make new column for borough names using dplyr and stringr
nyc_race_tracts <- nyc_race_tracts %>%
mutate(borough = case_when(
str_detect(NAME, "Bronx") ~ "Bronx",
str_detect(NAME, "Kings") ~ "Brooklyn",
str_detect(NAME, "New York County") ~ "Manhattan",
str_detect(NAME, "Queens") ~ "Queens",
str_detect(NAME, "Richmond") ~ "Staten Island",
TRUE ~ NA_character_
))
# adding borough names to income df
nyc_income_tracts <- nyc_income_tracts %>%
mutate(borough = case_when(
str_detect(NAME, "Bronx") ~ "Bronx",
str_detect(NAME, "Kings") ~ "Brooklyn",
str_detect(NAME, "New York County") ~ "Manhattan",
str_detect(NAME, "Queens") ~ "Queens",
str_detect(NAME, "Richmond") ~ "Staten Island",
TRUE ~ NA_character_
))
# calculate multi-group segregation indices per census tract
# ls = unit-level segregation scores
# ls = 1  average segregation
# ls > 1  more segregated than average
# ls < 1  less segregated than average
# ls = 0  no segregation
nyc_localseg_tracts <-
mutual_local(data = nyc_race_tracts,
group = "variable",
unit = "GEOID",
weight = "estimate",
wide = TRUE)
View(nyc_localseg_tracts)
# add borough column
nyc_localseg_tracts <- nyc_localseg_tracts %>%
left_join(nyc_race_tracts %>% select(GEOID, borough),
by = "GEOID")
head(nyc_localseg_tracts)
# calculate multi-group segregation indices per census tract
# ls = unit-level segregation scores
# ls = 1  average segregation
# ls > 1  more segregated than average
# ls < 1  less segregated than average
# ls = 0  no segregation
nyc_localseg_tracts <-
mutual_local(data = nyc_race_tracts,
group = "variable",
unit = "GEOID",
weight = "estimate",
wide = TRUE)
# add borough column
nyc_localseg_tracts <- nyc_localseg_tracts %>%
left_join(nyc_income_tracts %>% select(GEOID, borough),
by = "GEOID")
# calculate multi-group segregation indices per census tract
# ls = unit-level segregation scores
# ls = 1  average segregation
# ls > 1  more segregated than average
# ls < 1  less segregated than average
# ls = 0  no segregation
nyc_localseg_tracts <-
mutual_local(data = nyc_race_tracts,
group = "variable",
unit = "GEOID",
weight = "estimate",
wide = TRUE)
# get nyc median household income per census tract
nyc_income_tracts <- get_acs(geography = "tract",
state = "New York",
county = nyc_counties,
variables = "B19013_001E",
year = 2022,
output = "wide")
# adding borough names to income df
nyc_income_tracts <- nyc_income_tracts %>%
mutate(borough = case_when(
str_detect(NAME, "Bronx") ~ "Bronx",
str_detect(NAME, "Kings") ~ "Brooklyn",
str_detect(NAME, "New York County") ~ "Manhattan",
str_detect(NAME, "Queens") ~ "Queens",
str_detect(NAME, "Richmond") ~ "Staten Island",
TRUE ~ NA_character_
))
# calculate multi-group segregation indices per census tract
# ls = unit-level segregation scores
# ls = 1  average segregation
# ls > 1  more segregated than average
# ls < 1  less segregated than average
# ls = 0  no segregation
nyc_localseg_tracts <-
mutual_local(data = nyc_race_tracts,
group = "variable",
unit = "GEOID",
weight = "estimate",
wide = TRUE)
# add borough column
nyc_localseg_tracts <- nyc_localseg_tracts %>%
left_join(nyc_income_tracts %>% select(GEOID, borough),
by = "GEOID")
head(nyc_localseg_tracts)
# add income column
nyc_localseg_tracts <- nyc_localseg_tracts %>%
left_join(nyc_income_tracts %>% select(GEOID, B19013_001E),
by = "GEOID")
# rename census table name to income
nyc_localseg_tracts <- nyc_localseg_tracts %>%
rename(
income = B19013_001E
)
# remove rows with no income data
nyc_localseg_tracts <- na.omit(nyc_localseg_tracts)
# export to json for vega
write_json(nyc_localseg_tracts, "nyc_censustracts.json", pretty=TRUE)
setwd("/Users/jocelyn/Documents/Pratt/616-interactive-viz/vega-tutorials/data")
library(tidyverse)
library(tidycensus)
library(segregation)
library(dplyr)
library(stringr)
library(jsonlite)
census_api_key("e765fd46add9ecff24174462fb36873559ba91e7")
# set up race variables
race <- c(
asian = "B03002_006",
black = "B03002_004",
hispanic = "B03002_012",
white = "B03002_003")
# nyc's counties, aka the five boroughs
nyc_counties <- c("Kings", "Queens", "New York", "Bronx", "Richmond")
# get nyc race data
nyc_race <- get_acs(geography = "school district",
state = "New York",
# geometry = TRUE,
county = nyc_counties,
variables = race,
year = 2022)
# get nyc median household income
nyc_income <- get_acs(geography = "school district",
state = "New York",
county = nyc_counties,
variables = "B19013_001E",
year = 2022,
output = "wide")
# get nyc race data
nyc_race <- get_acs(geography = "school district (unified)",
state = "New York",
# geometry = TRUE,
county = nyc_counties,
variables = race,
year = 2022)
# get nyc race data
nyc_race <- get_acs(geography = "voting district",
state = "New York",
# geometry = TRUE,
county = nyc_counties,
variables = race,
year = 2022)
# get nyc race data
nyc_race <- get_acs(geography = "school district (unified)",
state = "NY",
# geometry = TRUE,
county = nyc_counties,
variables = race,
year = 2022,
)
# get nyc race data
nyc_race <- get_acs(geography = "school district (unified)",
state = "NY",
# geometry = TRUE,
# county = nyc_counties,
variables = race,
year = 2022,
)
# get nyc median household income
nyc_income <- get_acs(geography = "school district (unified)",
state = "NY",
# county = nyc_counties,
variables = "B19013_001E",
year = 2022,
output = "wide")
View(nyc_race)
# get nyc race data
nyc_race <- get_acs(geography = "school district (elementary)",
state = "NY",
# geometry = TRUE,
county = nyc_counties,
variables = race,
year = 2022,
)
# get nyc race data
nyc_race <- get_acs(geography = "school district (elementary)",
state = "NY",
# geometry = TRUE,
# county = nyc_counties,
variables = race,
year = 2022,
)
# get nyc race data
nyc_race <- get_acs(geography = "tract",
state = "New York",
# geometry = TRUE,
county = nyc_counties,
variables = race,
year = 2022)
# get nyc median household income
nyc_income <- get_acs(geography = "tract",
state = "New York",
county = nyc_counties,
variables = "B19013_001E",
year = 2022,
output = "wide")
# make new column for borough names using dplyr and stringr
nyc_race <- nyc_race %>%
mutate(borough = case_when(
str_detect(NAME, "Bronx") ~ "Bronx",
str_detect(NAME, "Kings") ~ "Brooklyn",
str_detect(NAME, "New York County") ~ "Manhattan",
str_detect(NAME, "Queens") ~ "Queens",
str_detect(NAME, "Richmond") ~ "Staten Island",
TRUE ~ NA_character_
))
# adding borough names to income df
nyc_income <- nyc_income %>%
mutate(borough = case_when(
str_detect(NAME, "Bronx") ~ "Bronx",
str_detect(NAME, "Kings") ~ "Brooklyn",
str_detect(NAME, "New York County") ~ "Manhattan",
str_detect(NAME, "Queens") ~ "Queens",
str_detect(NAME, "Richmond") ~ "Staten Island",
TRUE ~ NA_character_
))
# testing dissimilarity index between two groups
nyc_race %>%
filter(variable %in% c("white", "black")) %>%
dissimilarity(
group = "variable",
unit = "GEOID",
weight = "estimate"
)
# testing dissimilarity by borough
nyc_race %>%
filter(variable %in% c("white", "black")) %>%
group_by(borough) %>%
group_modify(~
dissimilarity(.x,
group = "variable",
unit = "GEOID",
weight = "estimate")) %>%
arrange(desc(est))
# calculate multi-group segregation indices per census tract
# ls = unit-level segregation scores
# ls = 1  average segregation
# ls > 1  more segregated than average
# ls < 1  less segregated than average
# ls = 0  no segregation
nyc_localseg <-
mutual_local(data = nyc_race,
group = "variable",
unit = "GEOID",
weight = "estimate",
wide = TRUE)
# add borough column
nyc_localseg <- nyc_localseg %>%
left_join(nyc_income %>% select(GEOID, borough),
by = "GEOID")
head(nyc_localseg)
# add income column
nyc_localseg <- nyc_localseg %>%
left_join(nyc_income %>% select(GEOID, B19013_001E),
by = "GEOID")
# rename census table name to income
nyc_localseg <- nyc_localseg %>%
rename(
income = B19013_001E
)
# remove rows with no income data
nyc_localseg <- na.omit(nyc_localseg)
